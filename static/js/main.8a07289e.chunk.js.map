{"version":3,"sources":["components/navbar.jsx","components/counterComponent.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","console","log","react_default","a","createElement","className","href","totalCounters","Counter","prevProps","prevState","counter","value","this","_this","getBadgeClasses","formatCount","onClick","onIncrement","onDelete","id","classes","Component","Counters","_this$props","onReset","onResetAll","counters","map","counterComponent","key","initialState","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleIncrement","toConsumableArray","state","index","indexOf","objectSpread","setState","handleReset","c","handleResetAll","handleDelete","counterId","filter","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAmBeA,EAfA,SAAAC,GAGb,OAFAC,QAAQC,IAAI,qBAGVC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,cACc,IACZJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oCACbN,EAAMQ,kBCyCFC,6LA7CMC,EAAWC,GAC5BV,QAAQC,IAAI,YAAaQ,GACzBT,QAAQC,IAAI,YAAaS,GACrBD,EAAUE,QAAQC,MAAUC,KAAKd,MAAMY,QAAQC,qDAMnDZ,QAAQC,IAAI,sDAGL,IAAAa,EAAAD,KAEP,OADAb,QAAQC,IAAI,sBAEVC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAWQ,KAAKE,mBAAoBF,KAAKG,eAC/Cd,EAAAC,EAAAC,cAAA,UACEa,QAAS,kBAAMH,EAAKf,MAAMmB,YAAYJ,EAAKf,MAAMY,UACjDN,UAAU,4BAFZ,aAMAH,EAAAC,EAAAC,cAAA,UACEa,QAAS,kBAAMH,EAAKf,MAAMoB,SAASL,EAAKf,MAAMY,QAAQS,KACtDf,UAAU,6BAFZ,qDAWJ,IAAIgB,EAAU,mBAEd,OADAA,GAAwC,IAA7BR,KAAKd,MAAMY,QAAQC,MAAc,UAAY,gDAI5C,IACJA,EAAUC,KAAKd,MAAMY,QAArBC,MACR,OAAiB,IAAVA,EAAc,OAASA,SA/CZU,aC0BPC,mLAvBXvB,QAAQC,IAAI,uBADL,IAAAuB,EAE0DX,KAAKd,MAA9D0B,EAFDD,EAECC,QAASC,EAFVF,EAEUE,WAAYC,EAFtBH,EAEsBG,SAAUR,EAFhCK,EAEgCL,SAAUD,EAF1CM,EAE0CN,YACjD,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQa,QAASQ,EAASpB,UAAU,8BAApC,SAGAH,EAAAC,EAAAC,cAAA,UAAQa,QAASS,EAAYrB,UAAU,8BAAvC,cAGCsB,EAASC,IAAI,SAAAjB,GAAO,OACnBT,EAAAC,EAAAC,cAACyB,EAAD,CACEC,IAAKnB,EAAQS,GACbD,SAAUA,EACVD,YAAaA,EACbP,QAASA,cAjBEW,aCEjBS,SAAe,CACnBJ,SAAU,CACR,CAAEP,GAAI,EAAGR,MAAO,GAChB,CAAEQ,GAAI,EAAGR,MAAO,GAChB,CAAEQ,GAAI,EAAGR,MAAO,GAChB,CAAEQ,GAAI,EAAGR,MAAO,MA8DLoB,cAzDb,SAAAA,IAAc,IAAAlB,EAAA,OAAAmB,OAAAC,EAAA,EAAAD,CAAApB,KAAAmB,IACZlB,EAAAmB,OAAAE,EAAA,EAAAF,CAAApB,KAAAoB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAxB,QAUFyB,gBAAkB,SAAA3B,GAChB,IAAMgB,EAAQM,OAAAM,EAAA,EAAAN,CAAOnB,EAAK0B,MAAMb,UAC1Bc,EAAQd,EAASe,QAAQ/B,GAC/BgB,EAASc,GAATR,OAAAU,EAAA,EAAAV,CAAA,GAAuBtB,GACvBgB,EAASc,GAAO7B,QAChBE,EAAK8B,SAAS,CAAEjB,cAhBJb,EAmBd+B,YAAc,WACZ,IAAMlB,EAAWb,EAAK0B,MAAMb,SAASC,IAAI,SAAAkB,GAEvC,OADAA,EAAElC,MAAQ,EACHkC,IAEThC,EAAK8B,SAAS,CAAEjB,cAxBJb,EA2BdiC,eAAiB,WACfjC,EAAK8B,SAASb,IA5BFjB,EA+BdkC,aAAe,SAAAC,GACb,IAAMtB,EAAWb,EAAK0B,MAAMb,SAASuB,OAAO,SAAAJ,GAAC,OAAIA,EAAE1B,KAAO6B,IAC1DnC,EAAK8B,SAAS,CAAEjB,cA/BhBb,EAAK0B,MAAQT,EACb/B,QAAQC,IAAI,qBAHAa,mFAQZd,QAAQC,IAAI,kDA8BZ,OADAD,QAAQC,IAAI,kBAEVC,EAAAC,EAAAC,cAACF,EAAAC,EAAMgD,SAAP,KACEjD,EAAAC,EAAAC,cAACgD,EAAD,CACE7C,cAAeM,KAAK2B,MAAMb,SAASuB,OAAO,SAAAJ,GAAC,OAAIA,EAAElC,MAAQ,IAAGyC,SAE9DnD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACdH,EAAAC,EAAAC,cAACkD,EAAD,CACE3B,SAAUd,KAAK2B,MAAMb,SACrBF,QAASZ,KAAKgC,YACdnB,WAAYb,KAAKkC,eACjB7B,YAAaL,KAAKyB,gBAClBnB,SAAUN,KAAKmC,wBAlDT1B,aCFEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8a07289e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n// Stateless Functional Component\n\nconst NavBar = props => {\n  console.log(\"NavBar - Rendered\");\n\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Total Count{\" \"}\n        <span className=\"badge badge-pill badge-secondary\">\n          {props.totalCounters}\n        </span>\n      </a>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  //   constructor() {\n  //     super();\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  //   }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"prevProps\", prevProps);\n    console.log(\"prevState\", prevState);\n    if (prevProps.counter.value !== this.props.counter.value) {\n      //Ajax call and get new data from the server\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"Counter - Unmount\");\n  }\n\n  render() {\n    console.log(\"Counter - Rendered\");\n    return (\n      <div>\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counterComponent\";\n\nclass Counters extends Component {\n  render() {\n    console.log(\"Counters - Rendered\");\n    const { onReset, onResetAll, counters, onDelete, onIncrement } = this.props;\n    return (\n      <div>\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\n          Reset\n        </button>\n        <button onClick={onResetAll} className=\"btn btn-primary btn-sm m-2\">\n          Start Over\n        </button>\n        {counters.map(counter => (\n          <Counter\n            key={counter.id}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n            counter={counter}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\n\nconst initialState = {\n  counters: [\n    { id: 1, value: 0 },\n    { id: 2, value: 0 },\n    { id: 3, value: 0 },\n    { id: 4, value: 0 }\n  ]\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n    console.log(\"App - Constructor\");\n    // this.state = this.props.something;\n  }\n\n  componentDidMount() {\n    console.log(\"App - Mounted\");\n  }\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleResetAll = () => {\n    this.setState(initialState);\n  };\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  render() {\n    console.log(\"App - Rendered\");\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onResetAll={this.handleResetAll}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counters from \"./components/counters\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}